{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceOracle {\n    // 价格预言机映射\n    mapping(address => AggregatorV3Interface) public priceFeeds;\n    \n    // 设置价格预言机\n    function setPriceFeed(\n        address tokenAddress,\n        address _priceFeed\n    ) public {\n        priceFeeds[tokenAddress] = AggregatorV3Interface(_priceFeed);\n    }\n\n    // 获取价格数据（通过映射）\n    function getChainlinkDataFeedLatestAnswer(address tokenAddress) public view returns (int256) {\n        AggregatorV3Interface priceFeed = priceFeeds[tokenAddress];\n        require(address(priceFeed) != address(0), \"Price feed not set\");\n        // prettier-ignore\n        (\n            /* uint80 roundId */,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return answer;\n    }\n\n    // 直接获取价格（原有功能）\n    function getOrice(address payToken) public view returns (int256 amount) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(payToken);\n\n         // prettier-ignore\n        (\n            /* uint80 roundId */,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return answer;\n    }\n}\n\n\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}